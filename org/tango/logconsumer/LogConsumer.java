/*----- PROTECTED REGION ID(LogConsumer.java) ENABLED START -----*/
//=============================================================================
//
// file :        LogConsumer.java
//
// description : Java source for the LogConsumer class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               LogConsumer are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
// Copyright (C): 2004,2005,2006,2007,2008,2009,2009,2010,2011,2012,2013,2014,2015
//                European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                France
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

/*----- PROTECTED REGION END -----*/	//	LogConsumer.java

package org.tango.logconsumer;

/*----- PROTECTED REGION ID(LogConsumer.imports) ENABLED START -----*/
import fr.esrf.logviewer.EventDetails;
import fr.esrf.logviewer.MyTableModel;
import org.apache.log4j.Level;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.ext.XLogger;
import org.slf4j.ext.XLoggerFactory;
import org.tango.server.InvocationContext;
import org.tango.server.ServerManager;
import org.tango.server.annotation.AroundInvoke;
import org.tango.server.annotation.Command;
import org.tango.server.annotation.Delete;
import org.tango.server.annotation.Device;
import org.tango.server.annotation.DynamicManagement;
import org.tango.server.annotation.Init;
import org.tango.server.annotation.State;
import org.tango.server.annotation.Status;
import org.tango.server.annotation.DeviceManagement;
import org.tango.server.dynamic.DynamicManager;
import org.tango.server.device.DeviceManager;

//	Import Tango IDL types
import fr.esrf.Tango.*;

import java.util.HashMap;

/*----- PROTECTED REGION END -----*/	//	LogConsumer.imports

/**
 *  LogConsumer class description:
 *    A new implementation of LogConsumer (used by LogViewer)
 *    with new Tango server API.
 */

@Device
public class LogConsumer {

	protected static final Logger logger = LoggerFactory.getLogger(LogConsumer.class);
	protected static final XLogger xlogger = XLoggerFactory.getXLogger(LogConsumer.class);
	//========================================================
	//	Programmer's data members
	//========================================================
    /*----- PROTECTED REGION ID(LogConsumer.variables) ENABLED START -----*/
    
    //	Put static variables here
	private static HashMap<String, LogConsumer>	deviceInstances = new HashMap<>();
    
    /*----- PROTECTED REGION END -----*/	//	LogConsumer.variables
	/*----- PROTECTED REGION ID(LogConsumer.private) ENABLED START -----*/
	
	//	Put private variables here
	private MyTableModel myTableModel;

	/*----- PROTECTED REGION END -----*/	//	LogConsumer.private

	//========================================================
	//	Property data members and related methods
	//========================================================


	//========================================================
	//	Miscellaneous methods
	//========================================================
	/**
	 * Initialize the device.
	 * 
	 * @throws DevFailed if something fails during the device initialization.
	 */
	@Init(lazyLoading = false)
	public void initDevice() throws DevFailed {
		xlogger.entry();
		logger.debug("init device " + deviceManager.getName());
		/*----- PROTECTED REGION ID(LogConsumer.initDevice) ENABLED START -----*/
		
		//	Build a map to manage device instances
		deviceInstances.put(deviceManager.getName(), this);
		
		/*----- PROTECTED REGION END -----*/	//	LogConsumer.initDevice
		xlogger.exit();
	}

	/**
	 * all resources may be closed here. Collections may be also cleared.
	 * 
	 * @throws DevFailed if something fails during the device object delation.
	 */
	@Delete
	public void deleteDevice() throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(LogConsumer.deleteDevice) ENABLED START -----*/
		
		//	Put your device clearing code here
		
		/*----- PROTECTED REGION END -----*/	//	LogConsumer.deleteDevice
		xlogger.exit();
	}

	/**
	 * Method called before and after command and attribute calls.
	 * @param ctx the invocation context
	 * @throws DevFailed if something fails during this method execution.
	 */
	@AroundInvoke
	public void aroundInvoke(final InvocationContext ctx) throws DevFailed {
		xlogger.entry();
			/*----- PROTECTED REGION ID(LogConsumer.aroundInvoke) ENABLED START -----*/
			
			//	Put aroundInvoke code here
			
			/*----- PROTECTED REGION END -----*/	//	LogConsumer.aroundInvoke
		xlogger.exit();
	}

	
	/**
	 * dynamic command and attribute management. Will be injected by the framework.
	 */
	@DynamicManagement
	protected DynamicManager dynamicManager;
	/**
	 * @param dynamicManager the DynamicManager instance 
	 * @throws DevFailed if something fails during this method execution.
	 */
	public void setDynamicManager(final DynamicManager dynamicManager) throws DevFailed {
		this.dynamicManager = dynamicManager;
		/*----- PROTECTED REGION ID(LogConsumer.setDynamicManager) ENABLED START -----*/
		
		//	Put your code here
		
		/*----- PROTECTED REGION END -----*/	//	LogConsumer.setDynamicManager
	}
	
	/**
	 * Device management. Will be injected by the framework.
	 */
	@DeviceManagement
	DeviceManager deviceManager;
	public void setDeviceManager(DeviceManager deviceManager){
		this.deviceManager= deviceManager ;
	}




	//========================================================
	//	Command data members and related methods
	//========================================================
	/**
	 * The state of the device
	*/
	@State
	private DevState state = DevState.UNKNOWN;
	/**
	 * Execute command "State".
	 * description: This command gets the device state (stored in its 'state' data member) and returns it to the caller.
	 * @return Device state
	 * @throws DevFailed if command execution failed.
	 */
	public final DevState getState() throws DevFailed {
		/*----- PROTECTED REGION ID(LogConsumer.getState) ENABLED START -----*/
		
		//	Put state code here
		
		/*----- PROTECTED REGION END -----*/	//	LogConsumer.getState
		return state;
	}
	/**
	 * Set the device state
	 * @param state the new device state
	 */
	public void setState(final DevState state) {
		this.state = state;
	}
	
	/**
	 * The status of the device
	 */
	@Status
	private String status = "Server is starting. The device state is unknown";
	/**
	 * Execute command "Status".
	 * description: This command gets the device status (stored in its 'status' data member) and returns it to the caller.
	 * @return Device status
	 * @throws DevFailed if command execution failed.
	 */
	public final String getStatus() throws DevFailed {
		/*----- PROTECTED REGION ID(LogConsumer.getStatus) ENABLED START -----*/
		
		//	Put status code here
		
		/*----- PROTECTED REGION END -----*/	//	LogConsumer.getStatus
		return status;
	}
	/**
	 * Set the device status
	 * @param status the new device status
	 */
	public void setStatus(final String status) {
		this.status = status;
	}
	
	/**
	 * Execute command "Log".
	 * description: 
	 * @param logIn The log
	 * @throws DevFailed if command execution failed.
	 */
	@Command(name="Log", inTypeDesc="The log", outTypeDesc="")
	public void Log(String[] logIn) throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(LogConsumer.log) ENABLED START -----*/
		int num_logs = logIn.length / 6;
		if (num_logs != 0) {
			try {
				int idx = 0;
				String[] loc = {""};
				for (int i = 0; i < num_logs; i++) {
					myTableModel.addEvent(new EventDetails(Long.parseLong(logIn[idx]),
							Level.toLevel(logIn[idx + 1]),
							logIn[idx + 2],
							logIn[idx + 4],
							logIn[idx + 5],
							logIn[idx + 3],
							loc,
							""));
					idx += 6;

				}
			}
			catch (java.lang.OutOfMemoryError e) {
				xlogger.entry("myTableModel.addEvent failed: OutOfMemoryError caught");
			}
			catch (java.lang.Throwable e) {
				xlogger.entry("myTableModel.addEvent failed: unknown exception caught");
				xlogger.entry(e);
			}
		}


		
		/*----- PROTECTED REGION END -----*/	//	LogConsumer.log
		xlogger.exit();
	}
	
	/**
	 * Execute command "LogXml".
	 * description: 
	 * @param logXmlIn The log
	 * @throws DevFailed if command execution failed.
	 */
	@Command(name="LogXml", inTypeDesc="The log", outTypeDesc="")
	public void LogXml(String logXmlIn) throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(LogConsumer.logXml) ENABLED START -----*/
		
		//	Put command code here
		
		/*----- PROTECTED REGION END -----*/	//	LogConsumer.logXml
		xlogger.exit();
	}
	
	/**
	 * Execute command "Register".
	 * description: 
	 * @param registerIn The name of logging source to register
	 * @throws DevFailed if command execution failed.
	 */
	@Command(name="Register", inTypeDesc="The name of logging source to register",
	         outTypeDesc="")
	public void Register(String registerIn) throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(LogConsumer.register) ENABLED START -----*/
		myTableModel.addEvent(new EventDetails(System.currentTimeMillis(),
				Level.toLevel("INFO"),
				"LogViewer",
				"",
				"Local Thread",
				"Registering logging source: " + registerIn,
				new String[]{""},
				""));
		SourceSet.instance().add(registerIn);
		/*----- PROTECTED REGION END -----*/	//	LogConsumer.register
		xlogger.exit();
	}
	
	/**
	 * Execute command "UnRegister".
	 * description: 
	 * @param unRegisterIn The name of logging source to unregister
	 * @throws DevFailed if command execution failed.
	 */
	@Command(name="UnRegister", inTypeDesc="The name of logging source to unregister",
	         outTypeDesc="")
	public void UnRegister(String unRegisterIn) throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(LogConsumer.unRegister) ENABLED START -----*/
		String[] loc = {""};
		myTableModel.addEvent(new EventDetails(System.currentTimeMillis(),
				Level.toLevel("INFO"),
				"LogViewer",
				"",
				"Local Thread",
				"Unregistering logging source: " + unRegisterIn,
				loc,
				""));
		SourceSet.instance().remove(unRegisterIn);
		/*----- PROTECTED REGION END -----*/	//	LogConsumer.unRegister
		xlogger.exit();
	}
	

	//========================================================
	//	Programmer's methods
	//========================================================
	/*----- PROTECTED REGION ID(LogConsumer.methods) ENABLED START -----*/
	
	//	Put your own methods here
	//========================================================
	public void setModel (MyTableModel aModel) {
		myTableModel = aModel;
	}
	//========================================================
	public static LogConsumer getDeviceInstance(String deviceName) {
		return deviceInstances.get(deviceName);
	}
	//========================================================

	/*----- PROTECTED REGION END -----*/	//	LogConsumer.methods


	
	
	
	
	/**
	 * Starts the server.
	 * @param args program arguments (instance_name [-v[trace level]]  [-nodb [-dlist <device name list>] [-file=fileName]])
	 */
	public static void main(final String[] args) {
		ServerManager.getInstance().start(args, LogConsumer.class);
		System.out.println("------- Started -------------");
	}
}
